{"version":3,"sources":["store/post.ts","api.ts","store/posts.ts","store/index.ts","components/Header/Header.tsx","components/PostForm/PostForm.tsx","components/CommentsForm/CommentsForm.tsx","components/PostComments/PostComments.tsx","components/PostInfo/PostInfo.tsx","components/PostList/PostList.tsx","App.tsx","index.tsx"],"names":["ActionTypes","request","endpoint","options","a","url","fetch","response","json","data","getPosts","getPost","postId","deletePost","method","addComment","comment","body","JSON","stringify","headers","addPost","post","updatePost","postActions","setPost","type","SetPost","value","loadPost","dispatch","postSelectors","state","comments","reverse","initState","id","title","postsActions","setPosts","posts","SetPosts","loadPosts","postsSelectors","reducer","combineReducers","action","store","createStore","applyMiddleware","thunk","Header","className","to","PostForm","useDispatch","navigate","useNavigate","match","useMatch","useSelector","titleField","useRef","bodyField","onSubmit","event","preventDefault","newPost","current","updatedPost","defaultValue","ref","placeholder","required","CommentsForm","commentInput","useParams","PostComments","map","PostInfo","useEffect","href","onClick","PostList","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25e809da.chunk.js","sourcesContent":["import { AnyAction, Dispatch } from 'redux';\nimport { addComment, getPost } from '../api';\n\nenum ActionTypes {\n  SetPost = 'post/set',\n}\n\nexport const postActions = {\n  setPost: (post: Post): AnyAction => ({\n    type: ActionTypes.SetPost,\n    value: post,\n  }),\n\n  loadPost: (postId: number) => async (dispatch: Dispatch) => {\n    const post = await getPost(postId);\n\n    dispatch(postActions.setPost(post));\n  },\n\n  addComment: (comment: CommentModel) => async (dispatch: Dispatch) => {\n    await addComment(comment);\n\n    await postActions.loadPost(comment.postId)(dispatch);\n  },\n};\n\nexport const postSelectors = {\n  getPost: (state: State): Post => state.post,\n  getComments: (state: State): PostComment[] => [...state.post.comments || []].reverse(),\n};\n\nconst initState: Post = {\n  id: 0,\n  title: '',\n  body: '',\n  comments: [],\n};\n\nexport const postReducer = (state: Post = initState, action: AnyAction): Post => {\n  switch (action.type) {\n    case ActionTypes.SetPost:\n      return { ...action.value };\n    default:\n      return state;\n  }\n};\n","export const request = async <T>(endpoint: string, options?: RequestInit): Promise<T> => {\n  const url = `https://bloggy-api.herokuapp.com/${endpoint}`;\n\n  const response = await fetch(url, options);\n  const data: T = await response.json();\n\n  return data;\n};\n\nexport const getPosts = async (): Promise<Post[]> => {\n  return request('posts');\n};\n\nexport const getPost = async (postId: number): Promise<Post> => {\n  return request(`posts/${postId}?_embed=comments`);\n};\n\nexport const deletePost = async (postId: number): Promise<Post> => {\n  return request(`posts/${postId}`, { method: 'DELETE' });\n};\n\nexport const addComment = async (comment: CommentModel) => {\n  await request('comments', {\n    method: 'POST',\n    body: JSON.stringify(comment),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n\nexport const addPost = async (post: PostModel) => {\n  await request('posts', {\n    method: 'POST',\n    body: JSON.stringify(post),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n\nexport const updatePost = async (postId: number, post: PostModel) => {\n  await request(`posts/${postId}`, {\n    method: 'PUT',\n    body: JSON.stringify(post),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  });\n};\n","import { AnyAction, Dispatch } from 'redux';\nimport {\n  addPost,\n  deletePost,\n  getPosts,\n  updatePost,\n} from '../api';\nimport { postActions } from './post';\n\nenum ActionTypes {\n  SetPosts = 'posts/set',\n}\n\nexport const postsActions = {\n  setPosts: (posts: Post[]): AnyAction => ({\n    type: ActionTypes.SetPosts,\n    value: posts,\n  }),\n\n  loadPosts: () => async (dispatch: Dispatch) => {\n    const posts = await getPosts();\n\n    dispatch(postsActions.setPosts(posts));\n  },\n\n  deletePost: (postId: number) => async (dispatch: Dispatch) => {\n    await deletePost(postId);\n\n    await postsActions.loadPosts()(dispatch);\n  },\n\n  addPost: (post: PostModel) => async (dispatch: Dispatch) => {\n    await addPost(post);\n\n    await postsActions.loadPosts()(dispatch);\n  },\n\n  updatePost: (postId: number, post: PostModel) => async (dispatch: Dispatch) => {\n    await updatePost(postId, post);\n\n    await postsActions.loadPosts()(dispatch);\n\n    await postActions.loadPost(postId)(dispatch);\n  },\n};\n\nexport const postsSelectors = {\n  getPosts: (state: State): Post[] => state.posts,\n};\n\nexport const postsReducer = (state: Post[] = [], action: AnyAction): Post[] => {\n  switch (action.type) {\n    case ActionTypes.SetPosts:\n      return [...action.value];\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { postReducer } from './post';\nimport { postsReducer } from './posts';\n\nconst reducer = combineReducers({\n  posts: postsReducer,\n  post: postReducer,\n});\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Header.scss';\n\nexport const Header: React.FC = () => {\n  return (\n    <header>\n      <nav className=\"nav has-background-link\">\n        <span className=\"nav__title has-text-white\">\n          Blog\n        </span>\n\n        <Link\n          to=\"/new\"\n          className=\"nav__button button is-link is-light\"\n        >\n          Add a new post\n        </Link>\n      </nav>\n    </header>\n  );\n};\n","import React, { useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMatch, useNavigate } from 'react-router-dom';\nimport { postSelectors } from '../../store/post';\nimport { postsActions } from '../../store/posts';\n\nexport const PostForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const match = useMatch('/new');\n  const post = useSelector(postSelectors.getPost);\n  const titleField = useRef({} as HTMLInputElement);\n  const bodyField = useRef({} as HTMLTextAreaElement);\n\n  const updateSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const updatedPost: PostModel = {\n      title: titleField.current.value,\n      body: bodyField.current.value,\n    };\n\n    dispatch(postsActions.updatePost(post.id, updatedPost));\n    navigate(`/${post.id}`);\n  };\n\n  const addSubmitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const newPost: PostModel = {\n      title: titleField.current.value,\n      body: bodyField.current.value,\n    };\n\n    dispatch(postsActions.addPost(newPost));\n    navigate('/');\n  };\n\n  return (\n    <form\n      className=\"box\"\n      onSubmit={match ? addSubmitHandler : updateSubmitHandler}\n    >\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          defaultValue={match ? '' : post.title}\n          ref={titleField}\n          placeholder=\"Enter your title\"\n          required\n          className=\"input is-link\"\n        />\n      </div>\n\n      <div className=\"field\">\n        <textarea\n          placeholder=\"Enter your post\"\n          defaultValue={match ? '' : post.body}\n          ref={bodyField}\n          required\n          className=\"textarea is-link has-fixed-size\"\n        />\n      </div>\n\n      <div className=\"field is-grouped is-grouped-right\">\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Reset\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className=\"button is-link\"\n          >\n            {match ? 'Add' : 'Update'}\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { postActions } from '../../store/post';\n\nexport const CommentsForm: React.FC = () => {\n  const dispatch = useDispatch();\n  const commentInput = useRef({} as HTMLInputElement);\n  const { postId } = useParams();\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const comment: CommentModel = {\n      postId: +(postId as string),\n      body: commentInput.current.value,\n    };\n\n    commentInput.current.value = '';\n\n    dispatch(postActions.addComment(comment));\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className=\"field\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter your comment\"\n          ref={commentInput}\n          required\n          className=\"input is-link\"\n        />\n      </div>\n\n      <div className=\"field is-grouped is-grouped-right\">\n        <div className=\"control\">\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Reset\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className=\"button is-link\"\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { postSelectors } from '../../store/post';\nimport { CommentsForm } from '../CommentsForm/CommentsForm';\n\nexport const PostComments: React.FC = () => {\n  const comments = useSelector(postSelectors.getComments);\n\n  return (\n    <div className=\"box\">\n      <CommentsForm />\n      <h2 className=\"title has-text-link is-5\">Comments:</h2>\n      <ul className=\"list\">\n        {comments.map(comment => (\n          <li\n            className=\"message is-link\"\n            key={comment.id}\n          >\n            <p className=\"list__item message-body has-text-link\">\n              {comment.body}\n            </p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { postActions, postSelectors } from '../../store/post';\nimport { postsActions } from '../../store/posts';\nimport { PostComments } from '../PostComments/PostComments';\n\nexport const PostInfo: React.FC = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { postId } = useParams();\n  const post = useSelector(postSelectors.getPost);\n\n  useEffect(() => {\n    dispatch(postActions.loadPost(+(postId as string)));\n  }, [postId]);\n\n  const deletePost = (event: React.MouseEvent<HTMLAnchorElement>) => {\n    event.preventDefault();\n    dispatch(postsActions.deletePost(post.id));\n    navigate('/');\n  };\n\n  if (!post.id) {\n    return (\n      <div className=\"box has-background-danger-light has-text-danger\">\n        Post is not found\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"card\">\n        <header className=\"card-header\">\n          <p className=\"card-header-title is-centered has-text-link\">\n            {post.title}\n          </p>\n        </header>\n\n        <article className=\"card-content\">\n          <div className=\"content\">\n            {post.body}\n          </div>\n        </article>\n\n        <footer className=\"card-footer\">\n          <Link\n            to={`/${postId}/edit`}\n            className=\"card-footer-item\"\n          >\n            Edit\n          </Link>\n\n          <a\n            href=\"/\"\n            className=\"card-footer-item\"\n            onClick={deletePost}\n          >\n            Delete\n          </a>\n        </footer>\n      </div>\n\n      <PostComments />\n    </>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { postsActions, postsSelectors } from '../../store/posts';\nimport './PostList.scss';\n\nexport const PostList: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(postsSelectors.getPosts);\n\n  useEffect(() => {\n    dispatch(postsActions.loadPosts());\n  }, []);\n\n  return (\n    <ul className=\"list box\">\n      {posts.map(post => (\n        <li\n          className=\"message is-link\"\n          key={post.id}\n        >\n          <Link\n            to={`/${post.id}`}\n            className=\"list__item message-body has-text-link\"\n          >\n            {post.title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { Header } from './components/Header/Header';\nimport { PostForm } from './components/PostForm/PostForm';\nimport { PostInfo } from './components/PostInfo/PostInfo';\nimport { PostList } from './components/PostList/PostList';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <Header />\n      <div className=\"columns\">\n        <div className=\"column is-two-thirds\">\n          <PostList />\n        </div>\n\n        <div className=\"column\">\n          <Routes>\n            <Route\n              path=\"/\"\n              element={(\n                <div className=\"box has-background-warning-light has-text-link\">\n                  Please, choose a post in order to see the details.\n                </div>\n              )}\n            />\n            <Route path=\"/:postId\" element={<PostInfo />} />\n            <Route path=\"/:postId/edit\" element={<PostForm />} />\n            <Route path=\"/new\" element={<PostForm />} />\n          </Routes>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport 'bulma/css/bulma.css';\nimport './index.scss';\nimport store from './store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}